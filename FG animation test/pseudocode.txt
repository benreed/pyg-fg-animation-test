1. Dictionary of constants predefining all animation frame attributes EXCEPT the associated image:

	Key: Key, (Type, x, y, width, height), (Type, x, y, width, height)
	
2. Tuples in character dictionary are given as arguments to a constructor for an extended
	Rect class that assigns a type as well as location and dimensions:
	
	RectWithType(type, x, y, width, height)
	
3. Character constructor is called, referencing character constant dictionary to determine which
	character to make:
	
	PlayerCharacter(con.PHOEBE)
	
4. Inside character class:

	# Empty lists for AnimationFrames
	anim_frames_R = []
	anim_frames_L = []

	def __init__(self, chara):
		sprite_sheet = SpriteSheet(chara["SPRITESHEET"])
		
		originX = 0
		originY = 0
		image_width = chara["IMAGE_WIDTH"]
		image_height = chara["IMAGE_HEIGHT"]
		
		for x in range (0, chara["NUM_OF_FRAMES"]):
			# Slice image
			image = sprite_sheet.get_image(originX, originY, image_width, image_height)
			rects = []
			
			# Get rects from character constant list
			for y in range (1, len(chara["ANIMS"][x]):
				rects.append(chara["ANIMS"][x][y])
			
			# Combine the image and the rects to make an animation frame
			frame = AnimationFrame(image, rects)
			anim_frames_R.append(frame)
			originX += image_width
			
AnimationFrame(image, rects)

	image = None
	rects = []
	
------------------------
( "IDLE_1",   ("Sprite", 30,30,20,10), ("Vuln", 10, 10, 40, 20) )
	